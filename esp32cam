#include "esp_camera.h"
#include <WiFi.h>
#include "esp_http_server.h"  // Include HTTP server library

// Replace with your Wi-Fi credentials
const char* ssid = "Suchintita";
const char* password = "C24BGhosh";

// AI Thinker ESP32-CAM Pin Configuration
#define PWDN_GPIO_NUM    -1
#define RESET_GPIO_NUM   -1
#define XCLK_GPIO_NUM    0
#define SIOD_GPIO_NUM    26
#define SIOC_GPIO_NUM    27
#define Y9_GPIO_NUM      35
#define Y8_GPIO_NUM      34
#define Y7_GPIO_NUM      39
#define Y6_GPIO_NUM      36
#define Y5_GPIO_NUM      21
#define Y4_GPIO_NUM      19
#define Y3_GPIO_NUM      18
#define Y2_GPIO_NUM      5
#define VSYNC_GPIO_NUM   25
#define HREF_GPIO_NUM    23
#define PCLK_GPIO_NUM    22

void startCameraServer();  // ✅ Function Prototype

void setup() {
    Serial.begin(115200);
    Serial.setDebugOutput(true);
    Serial.println("\nBooting ESP32-CAM...");

    // ✅ Connect to Wi-Fi with Timeout (Prevents Infinite Loop)
    WiFi.begin(ssid, password);
    Serial.print("Connecting to Wi-Fi");
    
    int attempt = 0;
    while (WiFi.status() != WL_CONNECTED && attempt < 20) {  
        delay(500);
        Serial.print(".");
        attempt++;
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n✅ Wi-Fi Connected!");
        Serial.print("📶 IP Address: ");
        Serial.println(WiFi.localIP());
    } else {
        Serial.println("\n❌ Wi-Fi Connection Failed! Rebooting...");
        ESP.restart();
    }

    // ✅ Configure Camera Settings
    camera_config_t config;
    config.ledc_channel = LEDC_CHANNEL_0;
    config.ledc_timer = LEDC_TIMER_0;
    config.pin_d0 = Y2_GPIO_NUM;
    config.pin_d1 = Y3_GPIO_NUM;
    config.pin_d2 = Y4_GPIO_NUM;
    config.pin_d3 = Y5_GPIO_NUM;
    config.pin_d4 = Y6_GPIO_NUM;
    config.pin_d5 = Y7_GPIO_NUM;
    config.pin_d6 = Y8_GPIO_NUM;
    config.pin_d7 = Y9_GPIO_NUM;
    config.pin_xclk = XCLK_GPIO_NUM;
    config.pin_pclk = PCLK_GPIO_NUM;
    config.pin_vsync = VSYNC_GPIO_NUM;
    config.pin_href = HREF_GPIO_NUM;
    config.pin_sscb_sda = SIOD_GPIO_NUM;
    config.pin_sscb_scl = SIOC_GPIO_NUM;
    config.pin_pwdn = PWDN_GPIO_NUM;
    config.pin_reset = RESET_GPIO_NUM;
    config.xclk_freq_hz = 20000000;
    config.pixel_format = PIXFORMAT_JPEG;

    if (psramFound()) {
        Serial.println("✅ PSRAM Detected! Using high-resolution.");
        config.frame_size = FRAMESIZE_UXGA;
        config.jpeg_quality = 10;
        config.fb_count = 2;
    } else {
        Serial.println("⚠️ No PSRAM detected. Using lower resolution.");
        config.frame_size = FRAMESIZE_SVGA;
        config.jpeg_quality = 12;
        config.fb_count = 1;
    }

    // ✅ Initialize Camera
    esp_err_t err = esp_camera_init(&config);
    if (err != ESP_OK) {
        Serial.printf("\n❌ Camera initialization failed: 0x%x\n", err);
        ESP.restart();  // Reboot ESP32 if camera fails
    }
    Serial.println("✅ Camera initialized successfully!");

    // ✅ Start Camera Server
    startCameraServer();
    Serial.println("✅ Camera server started!");
}

void loop() {
    delay(100);
}

// ✅ Simple Camera Web Server (Stream Video)
void startCameraServer() {
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();
    httpd_handle_t server = NULL;

    if (httpd_start(&server, &config) == ESP_OK) {
        Serial.println("📷 Camera stream available at:");
        Serial.print("📡 http://");
        Serial.println(WiFi.localIP());
    } else {
        Serial.println("❌ Failed to start HTTP server.");
    }
}
